name: notesapp CI/CD
on:
  push:
    branches:
      - master
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Docker Compose Build
        run: docker compose build
      - name: Docker Compose Up
        env:
          PORT: 3000
          POSTGRES_USER: postgres
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          SECRET: ${{ secrets.SECRET }}
          SERVER_ADDRESS: ${{ secrets.SERVER_ADDRESS }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo -e "PORT=$PORT \nPOSTGRES_USER=$POSTGRES_USER \nPOSTGRES_DB=$POSTGRES_DB \nPOSTGRES_PASSWORD=$POSTGRES_PASSWORD \nPOSTGRES_HOST=$POSTGRES_HOST \nSECRET=$SECRET" > .env
          docker compose up -d
        
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Deploy in Server
        env:
          PORT: 3000
          POSTGRES_USER: postgres
          SERVER_ADDRESS: ${{ secrets.SERVER_ADDRESS }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "$SSH_PRIVATE_KEY" > ssh_private_key && chmod 600 ssh_private_key

          ssh -o StrictHostKeyChecking=no -i ssh_private_key notesapp@${SERVER_ADDRESS} '

            cd notes-app &&
            docker compose down &&
            git pull origin master &&
            echo -e "PORT=3000 \nPOSTGRES_USER=postgres \nPOSTGRES_DB=${{ secrets.POSTGRES_DB }} \nPOSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \nPOSTGRES_HOST=${{ secrets.POSTGRES_HOST }} \nSECRET=${{ secrets.SECRET }}" > .env &&
            sudo chmod 600 .env &&
            docker compose build --no-cache &&
            docker compose up -d
          
          '
        
        

